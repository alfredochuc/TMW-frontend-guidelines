{"name":"Tmw-frontend-guidelines","tagline":"Guidelines and standards for Front-end development at TMW","body":"Front-End Dev guidelines\r\n========================\r\n\r\n##Overview\r\n\r\nThis document details the guidelines and standards adhered to by the Creative Technology department at TMW, and all web applications built\r\nshould take these into consideration.  It is an evolving document and should be reviewed as and when required to keep up with changes in\r\ntechnology and best practice.\r\n\r\nThese guidelines have been compiled looking at various previously written guidelines - credit goes to [Isobar](http://na.isobar.com/standards)\r\nand [CSS Wizardry](https://github.com/csswizardry/CSS-Guidelines/blob/master/CSS%20Guidelines.md) both of which have been used as foundations\r\nto build upon for this document, and in some sections been directly quoted.\r\n\r\n##Contents\r\n\r\n1. [General Guidelines](#section-1)\r\n\r\n\ti. [Indentation](#section-1-a)\r\n\r\n\tii. [Readability vs Compression](#section-1-b)\r\n\r\n2. [Browser Support](#section-2)\r\n3. [Base Templates](#section-3)\r\n4. [Markup](#section-4)\r\n\r\n\ti. [HTML5](#section-4-a)\r\n\r\n\tii. [General Markup Guidelines](#section-4-b)\r\n\r\n\tiii. [Quoting Attributes](#section-4-c)\r\n\r\n\tiv. [Character Encoding](#section-4-d)\r\n\r\n\tv. [Accessibility](#section-4-e)\r\n\r\n5. [CSS](#section-5)\r\n\r\n\ti. [General CSS Principles](#section-5-a)\r\n\r\n\tii. [Syntax and formatting](#section-5-b)\r\n\r\n\tiii. [Indenting](#section-5-c)\r\n\r\n\tiv. [OOCSS](#section-5-d)\r\n\r\n\tv. [Typography](#section-5-e)\r\n\r\n\tvi. [Reset vs Normalisation](#section-5-f)\r\n\r\n\tvii. [Comments](#section-5-g)\r\n\r\n\tviii. [Specificity, IDs and classes](#section-5-h)\r\n\r\n\tix. [Conditional Stylesheets](#section-5-i)\r\n\r\n\tx. [!important](#section-5-j)\r\n\r\n\txi. [Images](#section-5-k)\r\n\r\n\txii. [Debugging](#section-5-l)\r\n\r\n\txiii. [Preprocessors](#section-5-m)\r\n\r\n\txiv. [Tools](#section-5-n)\r\n\r\n6. [JavaScript](#section-6)\r\n\r\n\ti. [Libraries](#section-6-a)\r\n\r\n\tii. [Plugins](#section-6-b)\r\n\r\n\tiii. [General JavaScript Principles](#section-6-c)\r\n\r\n\tiv. [Formatting and code sensibility](#section-6-d)\r\n\r\n\tv. [jQuery](#section-6-e)\r\n\r\n\tvi. [Debugging](#section-6-f)\r\n\r\n\tvii. [Resources](#section-6-g)\r\n\t\r\n7. [Accessibility](#section-7)\r\n8. [Performance and Optimisation](#section-8)\r\n\r\n\r\n***\r\n\r\n<a name=\"section-1\"></a> General Guidelines\r\n===========================================\r\n\r\n- All front-end code should display clear separation of presentation, content, and behaviour.\r\n- Markup should be well formed, semantically correct and generally valid.\r\n- JavaScript should progressively enhance the experience\r\n\t- Use feature detection rather than browser sniffing (edge cases such as performance are acceptable)\r\n- Gracefully degrade functionality when not present (e.g GPS, box-shadow, forms etc).\r\n\r\n\r\n##<a name=\"section-1-a\"></a> Indentation\r\n\r\nFor all languages, indent your code with tabs.  The default tab size should be set as 4.\r\n\r\n##<a name=\"section-1-b\"></a> Readability vs Compression\r\n\r\nWe encourage readability over file-size when it comes to maintaining existing files. Plenty of white-space is encouraged, along with ASCII art, where appropriate. There is no need for any developer to purposefully compress HTML or CSS, nor obfuscate JavaScript.\r\n\r\nWe will use server-side or build processes to automatically minify and gzip all static client-side files, such as CSS and JavaScript.\r\n\r\n***\r\n\r\n<a name=\"section-2\"></a> Browser Support\r\n========================================\r\n\r\n- Internet Explorer 7+\r\n- Firefox 3.6+\r\n- Google Chrome\r\n- Safari 5\r\n- Opera\r\n\r\n***\r\n\r\n<a name=\"section-3\"></a> Base Templates\r\n=======================================\r\n\r\nWe will be using a mashup of [Twitter Bootstrap](http://twitter.github.com/bootstrap/) and [H5BP](http://html5boilerplate.com/).  This is still being fleshed out and will be available on the [TMW github repo](https://github.com/organizations/tmwagency).\r\n\r\nThere will also be a much stripped back version of this available for less involved template builds, also available on github.\r\n\r\n***\r\n\r\n<a name=\"section-4\"></a> Markup\r\n===============================\r\n\r\n##<a name=\"section-4-a\"></a> HTML5\r\n\r\nThe HTML5 Doctype and HTML5 features will be used on projects when appropriate.\r\n\r\nTo ensure HTML5 markup compatibility with older browsers, use either:\r\n\r\n- [Modernizr](http://www.modernizr.com/) - consider bloat, use the build generator to decrease its size\r\n- [HTML5shiv](http://code.google.com/p/html5shiv/) - no feature detection, simply ensures markup compatibility\r\n\r\nWe will test our markup against the [W3C validator](http://validator.w3.org/), to ensure that the markup is well formed. 100% valid code is not a goal, but validation certainly helps to write more maintainable sites as well as debugging code. TMW does not guarantee markup is 100% valid, but instead assures the cross-browser experience is consistent.\r\n\r\n\r\n##<a name=\"section-4-b\"></a> General Markup Guidelines\r\n\r\nThe following are general guidelines for structuring your HTML markup. Authors are reminded to always use markup which represents the semantics of the content in the document being created.\r\n\r\n- Use `<p>` elements for paragraph delimiters as opposed to multiple `<br />` tags.\r\n- Items in list form should always be housed in a `<ul>`, `<ol>`, or `<dl>`, never a set of `<div>`s or `<p>`s.\r\n- Place an HTML comment around DIV tags that contain a larger amount of markup to indicate the element you're closing. It will help when there is a lot of nesting and indentation. For example:\r\n\t\r\n\t\t<!-- Start of .contentWrap -->\r\n\t\t<div class=\"contentWrap\">\r\n\r\n\t\t\t//some markup goes here\r\n\r\n\t\t</div> <!-- End of .contentWrap -->\r\n\r\n\r\n- Make use of `<thead>`, `<tbody>`, and `<th>` tags (and Scope attribute) when appropriate.\r\n- Make use of `<dl>` (definition lists) and `<blockquote>`, when appropriate.\r\n- Use `<label>` fields to label each form field.  The for attribute should associate itself with the input field, so users can click the labels and obtain focus.\r\n- Do not use the size attribute on your input fields. The size attribute is relative to the font-size of the text inside the input. Instead use CSS width.\r\n- Always use title-case for headers and titles. Do not use all caps or all lowercase titles in markup, instead apply the CSS property text-transform:uppercase/lowercase.\r\n- Use microformats and/or Microdata where appropriate, specifically hCard and adr.\r\n\r\n...and the single most important rule...\r\n\r\n- Tables **shouldn't ever** be used for page layout.\r\n\r\n##<a name=\"section-4-c\"></a> Quoting Attributes\r\n\r\nWhile the HTML5 specification defines quotes around attributes as optional for consistency with attributes that accept whitespace, all attributes should be quoted.\r\n\r\n\t<a href=\"mylink.html\" title=\"My Link Title\" data-attribute=\"32\">This is my Link</a>\r\n\r\n\r\n##<a name=\"section-4-d\"></a> Character Encoding\r\n\r\nAll markup should be delivered as UTF-8, as it's the most friendly for internationalization. It should be designated in both the HTTP header and the head of the document.\r\n\r\nSetting the character set using `<meta>` tags.\r\n\r\n\t<meta charset=\"utf-8\">\r\n\r\n\r\n##<a name=\"section-4-e\"></a> Accessibility\r\n\r\nConsider ARIA integration for high accessibility sites.\r\n\r\nFor our full guidelines on Accessibility, refer to the [Accessibility Guidelines](#section-7) section of this document.\r\n\r\n***\r\n\r\n<a name=\"section-5\"></a> CSS\r\n============================\r\n\r\n##<a name=\"section-5-a\"></a> General CSS Principles\r\n\r\n- Every time you write inline styles in your markup, a front-end developer somewhere dies - whether it's in a style tag or directly in the markup. Don't do it.\r\n- Add CSS through external files, minimizing the number of files, if possible. CSS should always be included in the `<head>` of the document.\r\n- Use the `<link>` tag to include, never `@import`.\r\n- Ensure markup and style stays separate (some style classes are allowed, e.g imageReplace etc).  Only use style only markup if you absolutely have to (e.g extra wrapping elements); consider `:before` and `:after` CSS pseudo-elements if styles are not 100% necessary.\r\n\r\n\r\n##<a name=\"section-5-b\"></a> Syntax and formatting\r\n\r\n- Use multi-line CSS declarations. This helps with version control (diffing single line CSS can be a nightmare). Group CSS declarations by type - keeping font related styling together, layout styling together etc - and ordered by relevance, not alphabetized.\r\n- Selectors should be (insert fight to the death over hyphens or underscores).\r\n- All CSS rules should have a trailing semi-colon.\r\n- Use shorthand when specifying multiple values.  Remember longhand can be shorter for single values.\r\n- Multi-attribute selectors should go on separate lines.\r\n- Don't over qualify class or ID selectors.  Leads to specificity issues further down the line.\r\n\t\t\r\n\t\t// Bad\r\n\t\tdiv.content {}\r\n\r\n\t\t// Good\r\n\t\t.content {}\r\n\r\n- 0 requires no units\r\n\r\n\t\t// Good\r\n\t\t.bar,\r\n\t\t.foo[href=\"bar\"] {\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 0;\r\n\t\t\tright: 0;\r\n\t\t\tbottom: 0;\r\n\t\t\tleft: 0;\r\n\t\t\t\r\n\t\t\tpadding: 10px 0 0 0;\r\n\t\t\tmargin: 10px 0;\r\n\t\t\t\r\n\t\t\tbackground: red;\r\n\t\t\tborder-radius: 10px;\r\n\t\t\t-moz-border-radius: 10px;\r\n\t\t}\r\n\r\n\r\n##<a name=\"section-5-c\"></a> Indenting\r\n\r\nFor each level of markup nesting, indent your CSS to match.  For example:\r\n\r\n\t\tnav {}\r\n\t\t\tnav li {}\r\n\t\t\t\tnav li a {}\r\n\r\n\t\t.content {}\r\n\t\t\t.content p {}\r\n\r\n\r\n##<a name=\"section-5-d\"></a> OOCSS\r\n\r\nWhen building components try and keep a DRY, OO frame of mind.\r\n\r\nInstead of building dozens of unique components, try and spot repeated design patterns and abstract them; build these skeletons as base 'objects' and then peg classes onto these to extend their styling for more unique circumstances.\r\n\r\nIf you have to build a new component split it into structure and skin; build the structure of the component using very generic classes so that we can reuse that construct and then use more specific classes to skin it up and add design treatments.\r\n\r\nRead:\r\n- [The Nav Abstraction](http://csswizardry.com/2011/09/the-nav-abstraction/)\r\n\r\n\r\n##<a name=\"section-5-e\"></a> Typography\r\n\r\n@font-face should be used for font replacement where possible - ensuring that the font can be safely used in .ttf format on the web in agreement with its licensing agreement.  Where this is an issue, look to use tools such as [TypeKit](https://typekit.com/) or [Fontdeck](http://fontdeck.com/)\r\n\r\nTo generate @font-face files, the [Font Squirrel font-face generator](http://www.fontsquirrel.com/fontface/generator) should be used.\r\n\r\nJavaScript replacement techniques should be avoided where possible, as they are painful, time-consuming and usually inaccurate.  Flash replacement techniques (such as Sifr) should never be used.\r\n\r\nAlways define [supporting font-size classes](http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css/), in conjunction with headers to avoid restyling header sizes.\r\n\r\n\r\n##<a name=\"section-5-f\"></a> Reset vs Normalisation\r\n\r\nThere is no set preference to using a reset CSS file or using a normalisation technique, as long as consistency is applied throughout projects.\r\n\r\nIf a reset is preferred, the [Eric Meyer reloaded reset](http://html5doctor.com/html-5-reset-stylesheet/) should be used.\r\n\r\nFor normalisation, the excellent [normalise.css](http://necolas.github.com/normalize.css/) should be included.\r\n\r\nThe TMW base templates do however use normalisation rather than a CSS reset.\r\n\r\n\r\n##<a name=\"section-5-g\"></a> Comments\r\n\r\nComment as much as you can as often as you can. Where it might be useful, include a commented out piece of markup which can help put the current CSS into context.\r\n\r\nCSS will be minified before it hits live servers, so don't worry about excessive commenting bloating code - the benefits far outweigh any file-size worries.\r\n\r\nThis is especially true for responsive layouts where percentage width/margin's have been worked out.  Always comment in the ratio so that the resulting % values mean something to the next developer viewing your CSS.  A random 6dp percentage will mean nothing to anyone else looking at your code.\r\n\r\ne.g.\r\n\r\n\t\twidth: 34.042553% /* 320 / 940 */\r\n\r\n\r\n##<a name=\"section-5-h\"></a> Specificity, IDs and classes\r\n\r\nCSS is designed to cascade, so make sure you understand [cascading and selector specificity](http://www.stuffandnonsense.co.uk/archives/css_specificity_wars.html).  It will enable you to write very terse and effective code.\r\n\r\nUse of IDs and classes effect specificity massively.  Only use IDs where deemed necessary, especially on larger builds.  Classes are much more modular and portable.  If you want to use an ID solely as a JavaScript hook, consider using the ID alongside a class for CSS styling.\r\n\r\nName classes and IDs by the nature of **what it is** rather than what it looks like. A class of blueBoxLeft may seem relevant at the time, but should its colour change, it will become meaningless.  Naming in conjunction with a more OOCSS approach should eliminate this ambiguity.\r\n\r\n\r\n##<a name=\"section-5-i\"></a> Conditional Stylesheets\r\n\r\nIE stylesheets can, by and large, be totally avoided. The only time an IE stylesheet may be required is to circumvent blatant lack of support (e.g. PNG fixes).\r\n\r\nAs a general rule, all layout and box-model rules can and will work without an IE stylesheet if you refactor and rework your CSS. This means we never want to see `<!--[if IE 7]> element{ margin-left:-9px; } < ![endif]-->` or other such CSS that is clearly using arbitrary styling to just 'make stuff work'.\r\n\r\nIf IE specific styling is required as a last resort, look to utilise Paul Irish's [body/html class conditional for IE* targeting](http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/).\r\n\r\n\r\n##<a name=\"section-5-j\"></a> !important\r\n\r\nIt is okay to use !important on helper classes only. To add !important pre-emptively is fine, e.g. .error { color:red!important }, as you know you will always want this rule to take precedence.\r\n\r\nUsing !important reactively, e.g. to get yourself out of nasty specificity situations, is not advised. Rework your CSS and try to combat these issues by refactoring your selectors. Keeping your selectors short and avoiding IDs will help out here massively.\r\n\r\n\r\n##<a name=\"section-5-k\"></a> Images\r\n\r\nUse CSS sprites when possible. [Sprite Cow](http://www.spritecow.com/) is a great tool for generating the CSS required for positioning, as is [SpriteMe](http://spriteme.org/) for generating a sprite out of the images used on your site.\r\n\r\nImage names should use dashes i.e. icon-facebook-blue.png\r\n\r\n\r\n##<a name=\"section-5-l\"></a> Debugging\r\n\r\nIf you run into a CSS problem take code away before you start adding more in a bid to fix it. The problem will exist in the CSS that is already written, more CSS isn't necessarily the right answer!\r\n\r\nIt can be tempting to put overflow:hidden; on something to hide the effects of a layout quirk, but overflow was probably never the problem; fix the problem, not its symptoms.\r\n\r\n\r\n##<a name=\"section-5-m\"></a> Preprocessors\r\n\r\nUse of a preprocessor should be used on a per project basis where it is deemed necessary.\r\n\r\nWhere a preprocessor is used, we shall use [LESS](http://lesscss.org/).  The TMW base templates contain a set of LESS base files that should be used.\r\n\r\nBe sure to know the ins-and-outs of excellent vanilla CSS and where a preprocessor can aid that, not hinder or undo it. Learn the downsides of preprocessors inside-out and then fuse the best aspects of the two with the bad bits of neither.\r\n\r\n\r\n##<a name=\"section-5-n\"></a> Tools\r\n\r\n- [Procssor](http://procssor.com/) - formats untidy CSS into indented loveliness\r\n\r\n***\r\n\r\n<a name=\"section-6\"></a> Javascript\r\n===================================\r\n\r\n##<a name=\"section-6-a\"></a> Libraries\r\n\r\nWe develop all of our new applications using a mix of native JavaScript and [jQuery](http://jquery.com/).  Always use the Google CDN to include jQuery as well as a local fallback should that not be available.\r\n\r\n\t<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\r\n\t<script>window.jQuery || document.write('<script src=\"js/libs/jquery-1.7.2.min.js\"><\\/script>')</script>\r\n\r\n\r\n##<a name=\"section-6-b\"></a> Plugins\r\n\r\nWe maintain an active wiki detailing the JavaScript and jQuery plugins we use for common use cases such as form validation, carousels and lightboxes.  Any additions to this must first be added to the experimental list and then approved by at least 2 Members of the team.\r\n\r\nAll plugins should be added into the projects plugins.js and never included as a separate JS file, as it increases the number of page requests (page requests === bad).\r\n\r\n\r\n##<a name=\"section-6-c\"></a> General JavaScript Principles\r\n\r\n- 99% of JavaScript should be included in external JavaScript files and included at the END of the BODY tag.  The only exception to this rule is [Modernizr](http://modernizr.com/) which can be included at the end of the `<head>`.\r\n- Feature detect, don't browser detect.  [Modernizr](http://modernizr.com/) is a great resource for doing this.\r\n- Name variables and functions logically and in camelCase.\r\n- Prefix jQuery collection variables with the dollar (`$`) character e.g `$headerChildren`\r\n- Class declarations should start with a capital letter.\r\n- Constants or configuration variables should be at the start of a class.\r\n- Global variables should be written in all caps - although avoid polluting the global namespace where possible\r\n- Build using the object literal pattern e.g.\r\n\r\n\t\tvar BASENAME = {\r\n\t\t\tinit: function(){\r\n\t\t\t\tthis.$sections = $('#container section'),\r\n\t\t\t\tthis.$additionalTextNodes = $('section a > span')\r\n\t\t\t\tthis.createMarkup();\r\n\t\t\t},\r\n\t\t\tcreateMarkup: function(){\r\n\t\t\t\tvar $additionalTextNodes = this.$sections.remove();\r\n\t\t\t\t&additionalTextNodes.css({\r\n\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\ttop: this.style.left - $sections[0].style.width / 2\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tBASENAME.init();\r\n\r\n- Structure and formatting should follow the example below:\r\n\r\n\t\t$(function(){\r\n\t\t\t//globals here, in CAPS\r\n\r\n\t\t\tvar SiteSetup = {\r\n\t\t\t\tanimationSpeed: 100,\r\n\r\n\t\t\t\tinit : function () {\r\n\t\t\t\t\t//fire off all other classes\r\n\t\t\t\t\tif (LightBox.$lightbox.length > 0) {\r\n\t\t\t\t\t\tLightBox.init();\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tLightBox = {\r\n\t\t\t\t$lightbox: $('.lightbox'),\r\n\r\n\t\t\t\tinit : function () {},\r\n\t\t\t\topen : function () {},\r\n\t\t\t\tclose : function () {}\r\n\t\t\t};\r\n\r\n\t\t\tSiteSetup.init();\r\n\t\t});\r\n\r\n- Documentation should follow [NaturalDocs](http://www.naturaldocs.org/documenting.html) structure.  As with all code, document as frequently as you can - the more detail the better.  At the very least, document each function you create.\r\n\r\n**Read**\r\n[The Essentials of Writing High Quality JavaScript](http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/)\r\n\r\n\r\n##<a name=\"section-6-d\"></a> Formatting and code sensibility\r\n\r\n- Separate operators/comparators with spacing\r\n\r\n\t\t// Good\r\n\t\tif (foo && foo.bar && typeof foo.bar === 'object') {\r\n\t\t\tfoo.bar.call();\r\n\t\t}\r\n\t\r\n\t\t// Terrible\r\n\t\tif(foo&&foo.bar&&typeof foo.bar==='object'){\r\n\t\t\tfoo.bar.call();\r\n\t\t}\r\n\r\n- Use braces for logic evaluations.  If evaluation execution is simple, keep non-braced logic on a single line e.g:\r\n\t\r\n\t\t// Good\r\n\t\tif (i < 10) return true;\r\n\r\n\t\t// Good\r\n\t\tif(foo && foo.bar && foo.bar > 10) {\r\n\t\t\tfoo.baz = foo.bar - 100 * 2.7 + 'rad'\r\n\t\t}\r\n\t\r\n\t\t// Bad\r\n\t\tif(foo && foo.bar && foo.bar > 10)\r\n\t\t\tfoo.baz = foo.bar - 100 * 2.7 + 'rad'\r\n\t\r\n\t\t// Bad\r\n\t\tif(i < 10)\r\n\t\t\treturn true;\r\n\t\t\r\n\t\t// Bad\r\n\t\tif(i < 10)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n- Remap this to self when passing context\r\n- Always use `===` as a comparator (unless you really need flexible evaluations e.g comparison to null)\r\n- Always add a second radix param to parseInt() to prevent accidental octal issues\r\n- Never bother comparing variables to `true`/`false`\r\n- For large loops, either cache the length variable to prevent re-evaluation or use a reverse while loop\r\n- Don't create functions in loops - its slow (and stupid)\r\n- When creating functions with many parameters, pass in an object rather than listing numerous parameters.\r\n\t- use `$.extend` if you are using jQuery to extend a passed in object while providing defaults\r\n- If possible, avoid using bitwise operations unless they really help. If used, document them with comments\r\n\r\n\t\t// inverting bits to ease comparison to -1\r\n\t\tif (~foo.bar.indexOf('leetness')){\r\n\t\t\talert('w00t!')\r\n\t\t}\r\n\r\n##<a name=\"section-6-e\"></a> jQuery\r\n\r\n- Always cache DOM selection if you plan to re-use data\r\n- Use efficient query selectors, write for many browsers, don't assume document.querySelector()\r\n- Avoid using $.each for repeated or performance critical functionality, and instead use a for or reverse while loop (especially for large objects)\r\n- Use `on()` and `off()` handlers for events.  Everything else is now depreciated (live, delegate, bind)\r\n- When using simple html5 attribute data, simply use `$selected.attr('data-foo')` unless working with complex data types (where you can use `$selected.data()`)\r\n- Try to understand the underlying JavaScript functionality of jQuery methods.  This will help you write much more efficient selectors (watch Paul Irish's talk - [10 Things I Learned from the jQuery Source](http://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/))\r\n\r\n\r\n##<a name=\"section-6-f\"></a> Debugging\r\n\r\nLearn how to use your browser tools properly as it will save you hours in debugging.\r\n\r\nIf you're using `alert()` you're doing it wrong.  Use `console.log()`, or [Paul Irish's lightweight wrapper](http://paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/)\r\n\r\n\r\n##<a name=\"section-6-g\"></a> Resources\r\n\r\n1. Forms:\r\n\t- Uniform\r\n2. jQuery Tools\r\n3. Ender.js\r\n4. Require.js\r\n\r\nThis list will eventually go on a separate wiki detailing more specific plugin information.\r\n\r\n***\r\n\r\n<a name=\"section-7\"></a> Accessibility\r\n--------------------------------------\r\n\r\n- [Accessibility Testing](http://wave.webaim.org/)\r\n\r\n***\r\n\r\n<a name=\"section-8\"></a> Performance and Optimisation\r\n-----------------------------------------------------\r\n","google":"UA-27779119-7","note":"Don't delete this file! It's used internally to help with page regeneration."}